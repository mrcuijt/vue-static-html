// 0,0,3,140,0,16,0,3,0,0,0,5,0,0,0,0,27,210,22,17,21,140,24,0,173,14,108,231,137,9,126,229,168,128,195,160,140,6,249,253,222,153,116,24,140,160,79,5,255,203,123,18,96,32,121,44,105,178,187,129,233,111,155,206,218,57,172,134,113,55,80,122,6,95,82,234,147,193,164,76,186,95,222,217,24,170,236,114,186,112,128,149,67,225,0,63,88,226,169,165,194,185,65,166,197,188,181,78,31,0,203,106,50,247,255,127,173,237,46,90,105,100,90,50,111,253,219,153,187,38,9,209,38,94,87,124,164,97,82,18,84,171,102,145,74,138,68,74,155,179,41,188,207,56,17,231,196,111,74,210,65,110,186,19,40,28,93,135,145,181,97,222,44,0,111,47,120,230,221,219,246,167,193,77,31,14,243,4,248,13,183,191,110,0,145,31,192,241,69,218,177,77,2,216,54,6,181,180,160,89,125,230,185,95,29,233,253,16,53,88,104,234,139,14,14,183,55,98,172,190,127,226,210,94,142,146,78,160,114,83,184,97,240,34,164,141,74,159,88,219,151,51,183,196,158,35,137,61,33,255,187,62,114,103,28,153,72,249,111,129,111,191,225,215,197,2,98,234,193,152,172,193,82,72,7,48,86,121,83,246,30,86,179,224,209,249,122,186,30,108,88,26,167,79,199,251,249,185,227,62,147,100,238,233,60,78,139,23,149,173,12,165,174,76,220,99,17,35,179,4,77,85,103,14,122,88,6,192,180,69,215,175,219,126,243,197,191,133,206,89,82,25,107,2,77,188,9,7,64,220,117,64,7,240,241,12,35,109,236,178,190,93,102,47,158,90,4,137,129,28,211,240,139,113,135,3,238,8,42,137,189,212,10,74,208,103,145,71,26,139,47,6,104,190,8,11,59,218,124,126,188,110,126,232,102,232,76,7,105,235,106,132,17,148,208,138,24,36,83,77,10,125,7,0,56,128,56,173,54,137,104,230,59,115,216,75,34,239,108,79,207,143,0,142,146,109,189,186,250,53,8,225,49,120,17,32,181,13,142,83,14,138,93,2,18,139,24,188,24,73,108,29,161,56,149,125,234,16,243,144,252,21,203,137,213,137,21,70,248,87,252,137,180,104,89,62,141,182,168,167,134,185,151,206,201,59,241,74,65,196,32,78,65,215,218,40,158,230,169,198,105,146,61,55,215,174,211,52,162,204,18,222,171,227,10,71,93,13,39,44,254,111,83,240,194,83,83,111,60,96,132,245,144,81,101,12,122,142,153,47,30,250,230,65,50,122,64,255,39,66,233,21,77,87,197,95,104,9,73,84,98,154,144,74,170,245,201,174,37,186,132,202,205,197,70,108,238,221,77,49,200,157,168,123,82,244,65,203,150,155,56,236,85,45,157,221,215,57,16,84,131,44,149,93,168,172,16,32,145,115,206,124,129,208,183,14,131,22,200,94,99,184,19,20,133,65,20,129,132,55,238,84,83,71,144,248,112,180,185,182,147,246,169,238,53,146,23,153,46,61,37,34,89,116,207,75,94,127,48,239,147,139,193,86,216,142,161,50,4,61,183,204,47,232,155,135,92,15,104,239,145,95,65,53,220,66,19,181,85,234,18,238,212,241,237,219,84,226,125,119,124,87,165,88,163,80,163,218,112,125,65,255,193,54,216,89,62,169,14,101,190,39,230,83,157,156,37,96,53,57,20,175,65,224,59,65,154,102,40,117,202,215,176,230,138,142,139,182,238,140,62,213,81,187,237,92,214,77,68,247,160,121,186,165,164,119,110,223,243,71,121,175,151,165,89,61,216,14,227,49,84,193,32,232,152,249,84,167,111,31,4,160,9,182,231,144,197,117,40,148,144,148,181,237,147,22,246,32,204,27,208,211,194,61,166,238,26,167,81,167,110,66,220,153,247,232,51,181,212,3,49,23,81,233,222,22,156,230,168,140,40,242,24,244,128,19,229,179,234,88,180,220,52,95,38,90,89,9,177,104,101,129,87,144,76,244,7,77,163,205,62,227,90,91,201,220,116,47
var data = [
  0, 0, 3, 140, 0, 16, 0, 3, 0, 0, 0, 5, 0, 0, 0, 0, 27, 210, 22, 17, 21, 140,
  24, 0, 173, 14, 108, 231, 137, 9, 126, 229, 168, 128, 195, 160, 140, 6, 249,
  253, 222, 153, 116, 24, 140, 160, 79, 5, 255, 203, 123, 18, 96, 32, 121, 44,
  105, 178, 187, 129, 233, 111, 155, 206, 218, 57, 172, 134, 113, 55, 80, 122,
  6, 95, 82, 234, 147, 193, 164, 76, 186, 95, 222, 217, 24, 170, 236, 114, 186,
  112, 128, 149, 67, 225, 0, 63, 88, 226, 169, 165, 194, 185, 65, 166, 197, 188,
  181, 78, 31, 0, 203, 106, 50, 247, 255, 127, 173, 237, 46, 90, 105, 100, 90,
  50, 111, 253, 219, 153, 187, 38, 9, 209, 38, 94, 87, 124, 164, 97, 82, 18, 84,
  171, 102, 145, 74, 138, 68, 74, 155, 179, 41, 188, 207, 56, 17, 231, 196, 111,
  74, 210, 65, 110, 186, 19, 40, 28, 93, 135, 145, 181, 97, 222, 44, 0, 111, 47,
  120, 230, 221, 219, 246, 167, 193, 77, 31, 14, 243, 4, 248, 13, 183, 191, 110,
  0, 145, 31, 192, 241, 69, 218, 177, 77, 2, 216, 54, 6, 181, 180, 160, 89, 125,
  230, 185, 95, 29, 233, 253, 16, 53, 88, 104, 234, 139, 14, 14, 183, 55, 98,
  172, 190, 127, 226, 210, 94, 142, 146, 78, 160, 114, 83, 184, 97, 240, 34,
  164, 141, 74, 159, 88, 219, 151, 51, 183, 196, 158, 35, 137, 61, 33, 255, 187,
  62, 114, 103, 28, 153, 72, 249, 111, 129, 111, 191, 225, 215, 197, 2, 98, 234,
  193, 152, 172, 193, 82, 72, 7, 48, 86, 121, 83, 246, 30, 86, 179, 224, 209,
  249, 122, 186, 30, 108, 88, 26, 167, 79, 199, 251, 249, 185, 227, 62, 147,
  100, 238, 233, 60, 78, 139, 23, 149, 173, 12, 165, 174, 76, 220, 99, 17, 35,
  179, 4, 77, 85, 103, 14, 122, 88, 6, 192, 180, 69, 215, 175, 219, 126, 243,
  197, 191, 133, 206, 89, 82, 25, 107, 2, 77, 188, 9, 7, 64, 220, 117, 64, 7,
  240, 241, 12, 35, 109, 236, 178, 190, 93, 102, 47, 158, 90, 4, 137, 129, 28,
  211, 240, 139, 113, 135, 3, 238, 8, 42, 137, 189, 212, 10, 74, 208, 103, 145,
  71, 26, 139, 47, 6, 104, 190, 8, 11, 59, 218, 124, 126, 188, 110, 126, 232,
  102, 232, 76, 7, 105, 235, 106, 132, 17, 148, 208, 138, 24, 36, 83, 77, 10,
  125, 7, 0, 56, 128, 56, 173, 54, 137, 104, 230, 59, 115, 216, 75, 34, 239,
  108, 79, 207, 143, 0, 142, 146, 109, 189, 186, 250, 53, 8, 225, 49, 120, 17,
  32, 181, 13, 142, 83, 14, 138, 93, 2, 18, 139, 24, 188, 24, 73, 108, 29, 161,
  56, 149, 125, 234, 16, 243, 144, 252, 21, 203, 137, 213, 137, 21, 70, 248, 87,
  252, 137, 180, 104, 89, 62, 141, 182, 168, 167, 134, 185, 151, 206, 201, 59,
  241, 74, 65, 196, 32, 78, 65, 215, 218, 40, 158, 230, 169, 198, 105, 146, 61,
  55, 215, 174, 211, 52, 162, 204, 18, 222, 171, 227, 10, 71, 93, 13, 39, 44,
  254, 111, 83, 240, 194, 83, 83, 111, 60, 96, 132, 245, 144, 81, 101, 12, 122,
  142, 153, 47, 30, 250, 230, 65, 50, 122, 64, 255, 39, 66, 233, 21, 77, 87,
  197, 95, 104, 9, 73, 84, 98, 154, 144, 74, 170, 245, 201, 174, 37, 186, 132,
  202, 205, 197, 70, 108, 238, 221, 77, 49, 200, 157, 168, 123, 82, 244, 65,
  203, 150, 155, 56, 236, 85, 45, 157, 221, 215, 57, 16, 84, 131, 44, 149, 93,
  168, 172, 16, 32, 145, 115, 206, 124, 129, 208, 183, 14, 131, 22, 200, 94, 99,
  184, 19, 20, 133, 65, 20, 129, 132, 55, 238, 84, 83, 71, 144, 248, 112, 180,
  185, 182, 147, 246, 169, 238, 53, 146, 23, 153, 46, 61, 37, 34, 89, 116, 207,
  75, 94, 127, 48, 239, 147, 139, 193, 86, 216, 142, 161, 50, 4, 61, 183, 204,
  47, 232, 155, 135, 92, 15, 104, 239, 145, 95, 65, 53, 220, 66, 19, 181, 85,
  234, 18, 238, 212, 241, 237, 219, 84, 226, 125, 119, 124, 87, 165, 88, 163,
  80, 163, 218, 112, 125, 65, 255, 193, 54, 216, 89, 62, 169, 14, 101, 190, 39,
  230, 83, 157, 156, 37, 96, 53, 57, 20, 175, 65, 224, 59, 65, 154, 102, 40,
  117, 202, 215, 176, 230, 138, 142, 139, 182, 238, 140, 62, 213, 81, 187, 237,
  92, 214, 77, 68, 247, 160, 121, 186, 165, 164, 119, 110, 223, 243, 71, 121,
  175, 151, 165, 89, 61, 216, 14, 227, 49, 84, 193, 32, 232, 152, 249, 84, 167,
  111, 31, 4, 160, 9, 182, 231, 144, 197, 117, 40, 148, 144, 148, 181, 237, 147,
  22, 246, 32, 204, 27, 208, 211, 194, 61, 166, 238, 26, 167, 81, 167, 110, 66,
  220, 153, 247, 232, 51, 181, 212, 3, 49, 23, 81, 233, 222, 22, 156, 230, 168,
  140, 40, 242, 24, 244, 128, 19, 229, 179, 234, 88, 180, 220, 52, 95, 38, 90,
  89, 9, 177, 104, 101, 129, 87, 144, 76, 244, 7, 77, 163, 205, 62, 227, 90, 91,
  201, 220, 116, 47,
];

var wsBinaryHeaderList = [
  { name: "Header Length", key: "headerLen", bytes: 2, offset: 4, value: 16 },
  { name: "Protocol Version", key: "ver", bytes: 2, offset: 6, value: 1 },
  { name: "Operation", key: "op", bytes: 4, offset: 8, value: 2 },
  { name: "Sequence Id", key: "seq", bytes: 4, offset: 12, value: 1 },
];

var o = {
  a: {
    WS_AUTH_OK: 0,
    WS_AUTH_TOKEN_ERROR: -101,
    WS_BODY_PROTOCOL_VERSION_BROTLI: 3,
    WS_BODY_PROTOCOL_VERSION_NORMAL: 0,
    WS_HEADER_DEFAULT_OPERATION: 1,
    WS_HEADER_DEFAULT_SEQUENCE: 1,
    WS_HEADER_DEFAULT_VERSION: 1,
    WS_HEADER_OFFSET: 4,
    WS_OPERATION_OFFSET: 8,
    WS_OP_CONNECT_SUCCESS: 8,
    WS_OP_HEARTBEAT: 2,
    WS_OP_HEARTBEAT_REPLY: 3,
    WS_OP_MESSAGE: 5,
    WS_OP_USER_AUTHENTICATION: 7,
    WS_PACKAGE_HEADER_TOTAL_LENGTH: 16,
    WS_PACKAGE_OFFSET: 0,
    WS_SEQUENCE_OFFSET: 12,
    WS_VERSION_OFFSET: 6,
  },
};

var convertToObject = function (t) {
  var e = new DataView(t),
    n = {
      body: [],
    };
  if (
    ((n.packetLen = e.getInt32(o.a.WS_PACKAGE_OFFSET)),
    this.wsBinaryHeaderList.forEach(function (t) {
      4 === t.bytes
        ? (n[t.key] = e.getInt32(t.offset))
        : 2 === t.bytes && (n[t.key] = e.getInt16(t.offset));
    }),
    n.packetLen < t.byteLength && this.convertToObject(t.slice(0, n.packetLen)),
    this.decoder || (this.decoder = r.a.getDecoder()),
    !n.op || (o.a.WS_OP_MESSAGE !== n.op && n.op !== o.a.WS_OP_CONNECT_SUCCESS))
  )
    n.op &&
      o.a.WS_OP_HEARTBEAT_REPLY === n.op &&
      (n.body = {
        count: e.getInt32(o.a.WS_PACKAGE_HEADER_TOTAL_LENGTH),
      });
  else
    for (
      var i = o.a.WS_PACKAGE_OFFSET, s = n.packetLen, a = "", u = "";
      i < t.byteLength;
      i += s
    ) {
      (s = e.getInt32(i)), (a = e.getInt16(i + o.a.WS_HEADER_OFFSET));
      try {
        if (n.ver === o.a.WS_BODY_PROTOCOL_VERSION_NORMAL) {
          var c = this.decoder.decode(t.slice(i + a, i + s));
          u = 0 !== c.length ? JSON.parse(c) : null;
        } else if (n.ver === o.a.WS_BODY_PROTOCOL_VERSION_BROTLI) {
          var l = t.slice(i + a, i + s),
            h = window.BrotliDecode(new Uint8Array(l));
          u = this.convertToObject(h.buffer).body;
        }
        u && n.body.push(u);
      } catch (e) {
        //this.options.onLogger("decode body error:", new Uint8Array(t), n, e)
        console.info("decode body error:", new Uint8Array(t), n, e);
      }
    }
  return n;
};

function getR(t, e, n) {
  "use strict";
  var o = {
    getDecoder: function () {
      return window.TextDecoder
        ? new window.TextDecoder()
        : {
            decode: function (t) {
              return decodeURIComponent(
                window.escape(
                  String.fromCharCode.apply(String, new Uint8Array(t))
                )
              );
            },
          };
    },
    getEncoder: function () {
      return window.TextEncoder
        ? new window.TextEncoder()
        : {
            encode: function (t) {
              for (
                var e = new ArrayBuffer(t.length),
                  n = new Uint8Array(e),
                  o = 0,
                  i = t.length;
                o < i;
                o++
              )
                n[o] = t.charCodeAt(o);
              return e;
            },
          };
    },
    mergeArrayBuffer: function (t, e) {
      var n = new Uint8Array(t),
        o = new Uint8Array(e),
        i = new Uint8Array(n.byteLength + o.byteLength);
      return i.set(n, 0), i.set(o, n.byteLength), i.buffer;
    },
    callFunction: function (t, e) {
      return t instanceof Array && t.length
        ? (t.forEach(function (t) {
            return "function" == typeof t && t(e);
          }),
          null)
        : "function" == typeof t && t(e);
    },
    extend: function (t) {
      for (
        var e = arguments.length, n = Array(e > 1 ? e - 1 : 0), o = 1;
        o < e;
        o++
      )
        n[o - 1] = arguments[o];
      var i = t || {};
      return (
        i instanceof Object &&
          n.forEach(function (t) {
            t instanceof Object &&
              Object.keys(t).forEach(function (e) {
                i[e] = t[e];
              });
          }),
        i
      );
    },
  };
  e.a = o;
}

var buffer = new ArrayBuffer(data.length);
var uint8Array = new Uint8Array(buffer);
for (var i = 0; i < data.length; i++) {
  uint8Array[i] = data[i];
}
// console.log(uint8Array);
// console.log(uint8Array);
// var obj = convertToObject(buffer)

var e = new DataView(buffer);
console.log(buffer);

console.log(e.getInt32(o.a.WS_PACKAGE_OFFSET));

window.r = {};

getR(buffer, r, {});

var obj = convertToObject(buffer);

console.info(obj);

// for (tag in window) {
//   console.info(tag, window[tag]);
// }
